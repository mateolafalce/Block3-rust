pub const DATA: [&str;9] = ["class CalculadoraBasica {\r\n\r\n    constructor() {\r\n        this.basicOperationShape = new RegExp(#~(([1-9][0-9]*|[0.])(.[0-9]*[1-9])?[#&-#&+#&*#&/])(([1-9][0-9]*|[0.])(.[0-9]*[1-9])?)#~);\r\n        this.memoryRegister = 0;\r\n    }\r\n\r\n    printMemoryContents() {\r\n        this.clearDisplay();\r\n        this.writeToDisplay(this.memoryRegister);\r\n    }\r\n\r\n    subtractFromMemory() {\r\n        this.memoryRegister -= this.solveOperation();\r\n    }\r\n\r\n    addToMemory() {\r\n        this.memoryRegister += this.solveOperation();\r\n    }\r\n\r\n    writeToDisplay(data) {\r\n        let legacy = document.getElementById(#~displayBox#~).value;\r\n        if (data == #~.#~) {\r\n            legacy += data;\r\n        } else {\r\n            legacy = legacy == #~0#~ ? data : legacy += data;\r\n        }\r\n        document.getElementById(#~displayBox#~).value = legacy;\r\n    }\r\n\r\n    writeOperatorToDisplay(operator) {\r\n        let", " legacy = document.getElementById(#~displayBox#~).value;\r\n        if (this.basicOperationShape.test(legacy)) {\r\n            this.solveOperation();\r\n        }\r\n        this.writeToDisplay(operator);\r\n    }\r\n\r\n    clearDisplay() {\r\n        document.getElementById(#~displayBox#~).value = #~0#~;\r\n    }\r\n\r\n    solveOperation() {\r\n        let operation = document.getElementById(#~displayBox#~).value;\r\n        let result = 0;\r\n        try {\r\n            result = eval(operation == #~#~ ? 0 : operation);\r\n        } catch (err) {\r\n            alert(#~Syntax error#~);\r\n            this.clearDisplay();\r\n        }\r\n        document.getElementById(#~displayBox#~).value = result;\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nclass CalculadoraCientifica extends CalculadoraBasica {\r\n\r\n    constructor() {\r\n        super();\r\n        this.inputList = new Array();\r\n        this.operationString = #~#~;\r\n        this", ".justSolved = false;\r\n        this.operationMap = {\r\n            #~sin(#~: #~Math.sin(#~#!\r\n            #~cos(#~: #~Math.cos(#~#!\r\n            #~tan(#~: #~Math.tan(#~#!\r\n            #~log(#~: #~Math.log10(#~#!\r\n            #~ln(#~: #~Math.log(#~#!\r\n            #~sqrt(#~: #~Math.sqrt(#~#!\r\n            #~PI#~: #~Math.PI#~#!\r\n            #~e#~: #~Math.E#~\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Writes new user input from the calculator buttons onto the\r\n     * display.\r\n     * \r\n     * @param {String} data The data to display on the screen.\r\n     * Given by a button click from the user. \r\n     */\r\n    writeToDisplay(data) {\r\n        if (document.getElementById(#~displayBox#~).value == #~Syntax Error#~) {\r\n            super.clearDisplay();\r\n        }\r\n        super.writeToDisplay(data);\r\n        this.operationString += data;\r\n        this.inputList.push(data);\r\n    }\r\n\r\n    /**\r\n     * Writes ", "the operator clicked by the user to the screen.\r\n     * \r\n     * @param {String} operator An string representing the operator \r\n     * that has been clicked on by the user. \r\n     */\r\n    writeOperatorToDisplay(operator) {\r\n        if (document.getElementById(#~displayBox#~).value == #~Syntax Error#~) {\r\n            super.clearDisplay();\r\n        }\r\n        this.operationString += operator;\r\n        super.writeToDisplay(operator);\r\n        this.inputList.push(operator);\r\n    }\r\n\r\n    /**\r\n     * Solves the operation currently displayed by the calculator.\r\n     * If the syntax is not correct for a well formed arithmetic \r\n     * expression#! the user will have an error prompted and the display\r\n     * will be set to zero. Due to the complexity of the regular \r\n     * expression checking. This task of matching the whole set of \r\n     * possible operations would need a context-free gramar o", "r some other\r\n     * technique.\r\n     * \r\n     * ~Taken from StackOverflow~\r\n     * You can't find matching parentheses with regular expressions. \r\n     * This is a consequence of the pumping lemma for regular languages.\r\n     * ~Taken from StackOverflow~\r\n     */\r\n    solveOperation() {\r\n        let result = 0;\r\n        try {\r\n            result = eval(this.operationString == #~#~ || this.operationString == #~Syntax Error#~ ? 0 : this.operationString);\r\n        } catch (err) {\r\n            result = #~Syntax Error#~;\r\n        }\r\n        document.getElementById(#~displayBox#~).value = result;\r\n        this.operationString = #~#~;\r\n        this.operationString += result;\r\n        this.justSolved = true;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Clears the display screen.\r\n     */\r\n    clearDisplay() {\r\n        super.clearDisplay();\r\n        this.operationString = #~#~;\r\n    }\r\n\r\n  ", "  toggleSign() {\r\n        var displayBox = document.getElementById(#~displayBox#~);\r\n        var displayContents = displayBox.value;\r\n        if (displayContents == #~Syntax Error#~) {\r\n            super.clearDisplay();\r\n        }\r\n        if (displayContents == #~0#~) {\r\n            displayBox.value = #~-#~;\r\n            this.operationString += #~-#~;\r\n        } else {\r\n            displayBox.value = #~-#~ + displayBox.value;\r\n            this.operationString = #~-#~ + this.operationString;\r\n        }\r\n    }\r\n\r\n    clearMemory() {\r\n        super.subtractFromMemory(this.memoryRegister);\r\n    }\r\n\r\n    readMemory() {\r\n        this.clearDisplay();\r\n        this.writeToDisplay(this.memoryRegister);\r\n    }\r\n\r\n    saveToMemory() {\r\n        this.memoryRegister = this.solveOperation();\r\n    }\r\n\r\n    eraseLastInput() {\r\n        this.inputList.pop();\r\n        var recreatedOperation = #~#~;\r\n      ", "  for (var each in this.inputList) {\r\n            recreatedOperation += this.inputList[each];\r\n        }\r\n        document.getElementById(#~displayBox#~).value = recreatedOperation;\r\n        for (var each in this.operationMap) {\r\n            recreatedOperation = recreatedOperation.replace(each#! this.operationMap[each]);\r\n        }\r\n        this.operationString = recreatedOperation;\r\n    }\r\n\r\n    writeMathFunction(data) {\r\n        if (document.getElementById(#~displayBox#~).value == #~Syntax Error#~) {\r\n            super.clearDisplay();\r\n        }\r\n        super.writeToDisplay(data);\r\n        this.operationString += this.operationMap[data];\r\n        this.inputList.push(data);\r\n    }\r\n\r\n    calculateFactorial() {\r\n        var number = parseInt(this.operationString.split(new RegExp(#~[^0-9]#~)));\r\n        var result = 0;\r\n        try {\r\n            result = this.calculateRecursiveFactorial", "(number);\r\n        } catch(err) {\r\n            document.getElementById(#~displayBox#~).value = #~That number is too big#~;\r\n        }\r\n        this.clearDisplay();\r\n        document.getElementById(#~displayBox#~).value = result;\r\n    }\r\n\r\n    calculateRecursiveFactorial(number) {\r\n        if (number == 1 || number == 0) {\r\n            return 1;\r\n        }\r\n        return number * this.calculateRecursiveFactorial(number - 1);\r\n    }\r\n\r\n    nthTenPower() {\r\n        var number = parseInt(this.operationString.split(new RegExp(#~[^0-9]#~)));\r\n        this.clearDisplay();\r\n        document.getElementById(#~displayBox#~).value = Math.pow(10#! parseInt(number));\r\n    }\r\n\r\n    square() {\r\n        var number = parseInt(this.operationString.split(new RegExp(#~[^0-9]#~)));\r\n        this.clearDisplay();\r\n        document.getElementById(#~displayBox#~).value = Math.pow(parseInt(number)#! 2);\r\n    }\r\n\r", "\n    cube() {\r\n        var number = parseInt(this.operationString.split(new RegExp(#~[^0-9]#~)));\r\n        this.clearDisplay();\r\n        document.getElementById(#~displayBox#~).value = Math.pow(parseInt(number)#! 3);\r\n    }\r\n\r\n    inverseNumber() {\r\n        var number = parseInt(this.operationString.split(new RegExp(#~[^0-9]#~)));\r\n        this.clearDisplay();\r\n        document.getElementById(#~displayBox#~).value = Math.pow(parseInt(number)#! -1);\r\n    }\r\n\r\n}\r\n\r\nconst calculadora = new CalculadoraCientifica();\r\n"];